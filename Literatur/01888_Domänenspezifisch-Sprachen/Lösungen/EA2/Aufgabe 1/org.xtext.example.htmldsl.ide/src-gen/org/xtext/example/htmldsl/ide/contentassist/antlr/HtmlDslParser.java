/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.htmldsl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.xtext.example.htmldsl.ide.contentassist.antlr.internal.InternalHtmlDslParser;
import org.xtext.example.htmldsl.services.HtmlDslGrammarAccess;

public class HtmlDslParser extends AbstractContentAssistParser {

	@Inject
	private HtmlDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalHtmlDslParser createParser() {
		InternalHtmlDslParser result = new InternalHtmlDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getBodyElementAccess().getAlternatives(), "rule__BodyElement__Alternatives");
					put(grammarAccess.getPageAccess().getGroup(), "rule__Page__Group__0");
					put(grammarAccess.getHeading1Access().getGroup(), "rule__Heading1__Group__0");
					put(grammarAccess.getHeading2Access().getGroup(), "rule__Heading2__Group__0");
					put(grammarAccess.getParagraphAccess().getGroup(), "rule__Paragraph__Group__0");
					put(grammarAccess.getAnchorAccess().getGroup(), "rule__Anchor__Group__0");
					put(grammarAccess.getWebSiteAccess().getPagesAssignment(), "rule__WebSite__PagesAssignment");
					put(grammarAccess.getPageAccess().getNameAssignment_1(), "rule__Page__NameAssignment_1");
					put(grammarAccess.getPageAccess().getBodyElementsAssignment_3(), "rule__Page__BodyElementsAssignment_3");
					put(grammarAccess.getHeading1Access().getTextAssignment_2(), "rule__Heading1__TextAssignment_2");
					put(grammarAccess.getHeading2Access().getTextAssignment_2(), "rule__Heading2__TextAssignment_2");
					put(grammarAccess.getParagraphAccess().getTextAssignment_2(), "rule__Paragraph__TextAssignment_2");
					put(grammarAccess.getAnchorAccess().getDestinationAssignment_2(), "rule__Anchor__DestinationAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalHtmlDslParser typedParser = (InternalHtmlDslParser) parser;
			typedParser.entryRuleWebSite();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public HtmlDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(HtmlDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
