/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.htmldsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HtmlDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class WebSiteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.WebSite");
		private final Assignment cPagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPagesPageParserRuleCall_0 = (RuleCall)cPagesAssignment.eContents().get(0);
		
		//WebSite:
		//	pages+=Page+;
		@Override public ParserRule getRule() { return rule; }
		
		//pages+=Page+
		public Assignment getPagesAssignment() { return cPagesAssignment; }
		
		//Page
		public RuleCall getPagesPageParserRuleCall_0() { return cPagesPageParserRuleCall_0; }
	}
	public class PageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.Page");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyElementsBodyElementParserRuleCall_3_0 = (RuleCall)cBodyElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Page:
		//	'page' name=ID '{'
		//	bodyElements+=BodyElement+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'page' name=ID '{' bodyElements+=BodyElement+ '}'
		public Group getGroup() { return cGroup; }
		
		//'page'
		public Keyword getPageKeyword_0() { return cPageKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//bodyElements+=BodyElement+
		public Assignment getBodyElementsAssignment_3() { return cBodyElementsAssignment_3; }
		
		//BodyElement
		public RuleCall getBodyElementsBodyElementParserRuleCall_3_0() { return cBodyElementsBodyElementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class BodyElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.BodyElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHeading1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeading2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParagraphParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAnchorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BodyElement:
		//	Heading1 | Heading2 | Paragraph | Anchor;
		@Override public ParserRule getRule() { return rule; }
		
		//Heading1 | Heading2 | Paragraph | Anchor
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Heading1
		public RuleCall getHeading1ParserRuleCall_0() { return cHeading1ParserRuleCall_0; }
		
		//Heading2
		public RuleCall getHeading2ParserRuleCall_1() { return cHeading2ParserRuleCall_1; }
		
		//Paragraph
		public RuleCall getParagraphParserRuleCall_2() { return cParagraphParserRuleCall_2; }
		
		//Anchor
		public RuleCall getAnchorParserRuleCall_3() { return cAnchorParserRuleCall_3; }
	}
	public class Heading1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.Heading1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cH1Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Heading1:
		//	'h1' '{'
		//	text=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'h1' '{' text=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'h1'
		public Keyword getH1Keyword_0() { return cH1Keyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class Heading2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.Heading2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cH2Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Heading2:
		//	'h2' '{'
		//	text=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'h2' '{' text=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'h2'
		public Keyword getH2Keyword_0() { return cH2Keyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParagraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.Paragraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTextAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTextSTRINGTerminalRuleCall_2_0 = (RuleCall)cTextAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Paragraph:
		//	'p' '{'
		//	text=STRING
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'p' '{' text=STRING '}'
		public Group getGroup() { return cGroup; }
		
		//'p'
		public Keyword getPKeyword_0() { return cPKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//text=STRING
		public Assignment getTextAssignment_2() { return cTextAssignment_2; }
		
		//STRING
		public RuleCall getTextSTRINGTerminalRuleCall_2_0() { return cTextSTRINGTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class AnchorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.htmldsl.HtmlDsl.Anchor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestinationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestinationPageCrossReference_2_0 = (CrossReference)cDestinationAssignment_2.eContents().get(0);
		private final RuleCall cDestinationPageIDTerminalRuleCall_2_0_1 = (RuleCall)cDestinationPageCrossReference_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Anchor:
		//	'a' '{'
		//	destination=[Page]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'a' '{' destination=[Page] '}'
		public Group getGroup() { return cGroup; }
		
		//'a'
		public Keyword getAKeyword_0() { return cAKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//destination=[Page]
		public Assignment getDestinationAssignment_2() { return cDestinationAssignment_2; }
		
		//[Page]
		public CrossReference getDestinationPageCrossReference_2_0() { return cDestinationPageCrossReference_2_0; }
		
		//ID
		public RuleCall getDestinationPageIDTerminalRuleCall_2_0_1() { return cDestinationPageIDTerminalRuleCall_2_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final WebSiteElements pWebSite;
	private final PageElements pPage;
	private final BodyElementElements pBodyElement;
	private final Heading1Elements pHeading1;
	private final Heading2Elements pHeading2;
	private final ParagraphElements pParagraph;
	private final AnchorElements pAnchor;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HtmlDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pWebSite = new WebSiteElements();
		this.pPage = new PageElements();
		this.pBodyElement = new BodyElementElements();
		this.pHeading1 = new Heading1Elements();
		this.pHeading2 = new Heading2Elements();
		this.pParagraph = new ParagraphElements();
		this.pAnchor = new AnchorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.htmldsl.HtmlDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//WebSite:
	//	pages+=Page+;
	public WebSiteElements getWebSiteAccess() {
		return pWebSite;
	}
	
	public ParserRule getWebSiteRule() {
		return getWebSiteAccess().getRule();
	}
	
	//Page:
	//	'page' name=ID '{'
	//	bodyElements+=BodyElement+
	//	'}';
	public PageElements getPageAccess() {
		return pPage;
	}
	
	public ParserRule getPageRule() {
		return getPageAccess().getRule();
	}
	
	//BodyElement:
	//	Heading1 | Heading2 | Paragraph | Anchor;
	public BodyElementElements getBodyElementAccess() {
		return pBodyElement;
	}
	
	public ParserRule getBodyElementRule() {
		return getBodyElementAccess().getRule();
	}
	
	//Heading1:
	//	'h1' '{'
	//	text=STRING
	//	'}';
	public Heading1Elements getHeading1Access() {
		return pHeading1;
	}
	
	public ParserRule getHeading1Rule() {
		return getHeading1Access().getRule();
	}
	
	//Heading2:
	//	'h2' '{'
	//	text=STRING
	//	'}';
	public Heading2Elements getHeading2Access() {
		return pHeading2;
	}
	
	public ParserRule getHeading2Rule() {
		return getHeading2Access().getRule();
	}
	
	//Paragraph:
	//	'p' '{'
	//	text=STRING
	//	'}';
	public ParagraphElements getParagraphAccess() {
		return pParagraph;
	}
	
	public ParserRule getParagraphRule() {
		return getParagraphAccess().getRule();
	}
	
	//Anchor:
	//	'a' '{'
	//	destination=[Page]
	//	'}';
	public AnchorElements getAnchorAccess() {
		return pAnchor;
	}
	
	public ParserRule getAnchorRule() {
		return getAnchorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
