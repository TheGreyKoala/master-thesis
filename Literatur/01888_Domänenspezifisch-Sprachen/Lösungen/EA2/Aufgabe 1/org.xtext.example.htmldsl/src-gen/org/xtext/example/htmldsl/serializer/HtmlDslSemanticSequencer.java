/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.htmldsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.htmldsl.htmlDsl.Anchor;
import org.xtext.example.htmldsl.htmlDsl.Heading1;
import org.xtext.example.htmldsl.htmlDsl.Heading2;
import org.xtext.example.htmldsl.htmlDsl.HtmlDslPackage;
import org.xtext.example.htmldsl.htmlDsl.Page;
import org.xtext.example.htmldsl.htmlDsl.Paragraph;
import org.xtext.example.htmldsl.htmlDsl.WebSite;
import org.xtext.example.htmldsl.services.HtmlDslGrammarAccess;

@SuppressWarnings("all")
public class HtmlDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private HtmlDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HtmlDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HtmlDslPackage.ANCHOR:
				sequence_Anchor(context, (Anchor) semanticObject); 
				return; 
			case HtmlDslPackage.HEADING1:
				sequence_Heading1(context, (Heading1) semanticObject); 
				return; 
			case HtmlDslPackage.HEADING2:
				sequence_Heading2(context, (Heading2) semanticObject); 
				return; 
			case HtmlDslPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case HtmlDslPackage.PARAGRAPH:
				sequence_Paragraph(context, (Paragraph) semanticObject); 
				return; 
			case HtmlDslPackage.WEB_SITE:
				sequence_WebSite(context, (WebSite) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BodyElement returns Anchor
	 *     Anchor returns Anchor
	 *
	 * Constraint:
	 *     destination=[Page|ID]
	 */
	protected void sequence_Anchor(ISerializationContext context, Anchor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HtmlDslPackage.Literals.ANCHOR__DESTINATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HtmlDslPackage.Literals.ANCHOR__DESTINATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAnchorAccess().getDestinationPageIDTerminalRuleCall_2_0_1(), semanticObject.getDestination());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyElement returns Heading1
	 *     Heading1 returns Heading1
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Heading1(ISerializationContext context, Heading1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HtmlDslPackage.Literals.HEADING1__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HtmlDslPackage.Literals.HEADING1__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeading1Access().getTextSTRINGTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BodyElement returns Heading2
	 *     Heading2 returns Heading2
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Heading2(ISerializationContext context, Heading2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HtmlDslPackage.Literals.HEADING2__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HtmlDslPackage.Literals.HEADING2__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHeading2Access().getTextSTRINGTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (name=ID bodyElements+=BodyElement+)
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BodyElement returns Paragraph
	 *     Paragraph returns Paragraph
	 *
	 * Constraint:
	 *     text=STRING
	 */
	protected void sequence_Paragraph(ISerializationContext context, Paragraph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HtmlDslPackage.Literals.PARAGRAPH__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HtmlDslPackage.Literals.PARAGRAPH__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParagraphAccess().getTextSTRINGTerminalRuleCall_2_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WebSite returns WebSite
	 *
	 * Constraint:
	 *     pages+=Page+
	 */
	protected void sequence_WebSite(ISerializationContext context, WebSite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
